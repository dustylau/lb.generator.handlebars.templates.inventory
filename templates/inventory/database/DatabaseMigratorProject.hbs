{
  "ConnectionStrings": {
    "Main": "{{#if CustomProperties.MainConnectionString.Value}}{{{CustomProperties.MainConnectionString.Value}}}{{else}}data source=localhost;initial catalog={{Namespace}}.DataStore;User ID=user;Password=changeit;persist security info=False;packet size=4096{{/if}}"
  }
}
//[{{Namespace}}.Database.Migrator/appsettings.debug.json]
//##SPLIT##
{
  "ConnectionStrings": {
    "Main": "{{#if CustomProperties.MainConnectionString.Value}}{{{CustomProperties.MainConnectionString.Value}}}{{else}}data source=localhost;initial catalog={{Namespace}}.DataStore;User ID=user;Password=changeit;persist security info=False;packet size=4096{{/if}}"
  }
}
//[{{Namespace}}.Database.Migrator/appsettings.development.json]
//##SPLIT##
{
  "ConnectionStrings": {
    "Main": "{{#if CustomProperties.MainConnectionString.Value}}{{{CustomProperties.MainConnectionString.Value}}}{{else}}data source=localhost;initial catalog={{Namespace}}.DataStore;User ID=user;Password=changeit;persist security info=False;packet size=4096{{/if}}"
  }
}
//[{{Namespace}}.Database.Migrator/appsettings.json]
//##SPLIT##
{
  "ConnectionStrings": {
    "Main": "{{#if CustomProperties.MainConnectionString.Value}}{{{CustomProperties.MainConnectionString.Value}}}{{else}}data source=localhost;initial catalog={{Namespace}}.DataStore;User ID=user;Password=changeit;persist security info=False;packet size=4096{{/if}}"
  }
}
//[{{Namespace}}.Database.Migrator/appsettings.production.json]
//##SPLIT##
{
  "ConnectionStrings": {
    "Main": "{{#if CustomProperties.MainConnectionString.Value}}{{{CustomProperties.MainConnectionString.Value}}}{{else}}data source=localhost;initial catalog={{Namespace}}.DataStore;User ID=user;Password=changeit;persist security info=False;packet size=4096{{/if}}"
  }
}
//[{{Namespace}}.Database.Migrator/appsettings.test.json]
//##SPLIT##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="CommonServiceLocator" Version="2.0.5" />
    <PackageReference Include="FluentMigrator" Version="3.2.7" />
    <PackageReference Include="FluentMigrator.Abstractions" Version="3.2.7" />
    <PackageReference Include="FluentMigrator.Extensions.SqlServer" Version="3.2.7" />
    <PackageReference Include="FluentMigrator.Runner" Version="3.2.7" />
    <PackageReference Include="FluentMigrator.Runner.SqlServer" Version="3.2.7" />
    <PackageReference Include="Lamar" Version="4.3.0" />
    <PackageReference Include="{{CoreNamespace}}.IOC" Version="{{CoreNamespaceVersion}}" />
    <PackageReference Include="{{CoreNamespace}}.IOC.Interfaces" Version="{{CoreNamespaceVersion}}" />
    <PackageReference Include="{{CoreNamespace}}.Logging" Version="{{CoreNamespaceVersion}}" />
    <PackageReference Include="{{CoreNamespace}}.Shared" Version="{{CoreNamespaceVersion}}" />
    <PackageReference Include="log4net" Version="2.0.8" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="3.1.5" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="3.1.5" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\\{{Namespace}}.Database.Migrations\\{{Namespace}}.Database.Migrations.csproj" />
    <ProjectReference Include="..\\{{Namespace}}.IOC\\{{Namespace}}.IOC.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Update="appsettings.debug.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="appsettings.development.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="appsettings.production.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="appsettings.test.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="log4net.config">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

</Project>
//[{{Namespace}}.Database.Migrator/{{Namespace}}.Database.Migrator.csproj]
//##SPLIT##
<?xml version="1.0" encoding="utf-8" ?>
<log4net>
  <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
    <lockingModel type="log4net.Appender.FileAppender+MinimalLock"/>
    <file value=".\" />
    <datePattern value="yyyy-MM-dd.'txt'"/>
    <staticLogFileName value="false"/>
    <appendToFile value="true"/>
    <rollingStyle value="Date"/>
    <maxSizeRollBackups value="100"/>
    <maximumFileSize value="15MB"/>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date [%thread] %-5level App  %newline %message %newline %newline"/>
    </layout>
  </appender>
  <appender name="ColoredConsoleAppender" type="log4net.Appender.ManagedColoredConsoleAppender">
    <mapping>
      <level value="DEBUG" />
      <foreColor value="Blue" />
    </mapping>
    <mapping>
      <level value="INFO" />
      <foreColor value="Green" />
    </mapping>
    <mapping>
      <level value="WARN" />
      <foreColor value="Yellow" />
    </mapping>
    <mapping>
      <level value="ERROR" />
      <foreColor value="White" />
      <backColor value="Red" />
    </mapping>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
    </layout>
  </appender>
  <root>
    <level value="DEBUG"/>
    <appender-ref ref="ColoredConsoleAppender"/>
    <appender-ref ref="RollingLogFileAppender"/>
  </root>
</log4net>
//[{{Namespace}}.Database.Migrator/log4net.config]
//##SPLIT##
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using CommonServiceLocator;
using FluentMigrator.Runner;
using FluentMigrator.Runner.Initialization;
using {{CoreNamespace}}.Logging;
using {{Namespace}}.Database.Migrations;
using {{Namespace}}.Domain.Core.Shared;
using {{Namespace}}.IOC;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}.Database.Migrator
{
    class Program
    {
        static void Main(string[] args)
        {
            Bootstrapper.BootstrapAndSetLocatorProvider();

            var ensureDatabaseExists = new EnsureDatabaseExists(
                ServiceLocator.Current.GetInstance<ISettings>().MainConnectionString
                );
            
            ensureDatabaseExists.Create();

            var serviceProvider = CreateServices();

            // Put the database update into a scope to ensure
            // that all resources will be disposed.
            using (var scope = serviceProvider.CreateScope())
            {
                UpdateDatabase(scope.ServiceProvider);
            }
        }

        /// <summary>
        /// Configure the dependency injection services
        /// </summary>
        public static IServiceProvider CreateServices()
        {
            return MigrationConfiguration.ConfigureServices(new ServiceCollection())
                .AddLogging(
                    builder => builder.AddProvider(
                        new Log4NetProvider(ServiceLocator.Current.GetInstance<string>("Log4NetConfigPath")
                        )
                    )
                )
                .BuildServiceProvider(false);
        }

        /// <summary>
        /// Update the database
        /// </summary>
        private static void UpdateDatabase(IServiceProvider serviceProvider)
        {
            // Instantiate the runner
            var runner = serviceProvider.GetRequiredService<IMigrationRunner>();

            // Execute the migrations
            runner.MigrateUp();
        }
    }
}
//[{{Namespace}}.Database.Migrator/Program.cs]